if (figma.editorType === "figma") figma.showUI(__html__, { themeColors: !0, width: 252, height: 1124, title: "Viewport Screenshot" }), figma.ui.onmessage = (y) => { if (y.type === "data-viewport") { const z = { url: y.options.url, viewport: y.options.viewport, imageHeight: 4096 }, D = `http://localhost:3000/?options=${encodeURIComponent(JSON.stringify(z))}`; console.log(D), fetch(D).then(async (v) => { return await v.json(); }).then(async (v) => { try { const j = []; let E = 0, B = 0; for (let k of v) { const J = figma.createImage(new Uint8Array(k.data)), { width: K, height: L } = await J.getSizeAsync(), C = figma.createFrame(); C.resize(K, L), C.fills = [{ type: "IMAGE", imageHash: J.hash, scaleMode: "FILL" }], j.push(C), E += K, B = Math.max(B, L); } let G = 0; for (let k of j) k.x = G, G += k.width; const b = figma.createFrame(); console.log("options.url", z.url), b.name = z.url.split("https://")[1], b.resize(E, B), b.layoutMode = "HORIZONTAL", b.verticalPadding = 0, b.horizontalPadding = 32, b.primaryAxisSizingMode = "AUTO", b.counterAxisSizingMode = "AUTO", b.itemSpacing = 8; for (let k of j) b.appendChild(k); } catch (j) { console.log("error", j); } }).catch((v) => { console.log("error", v), figma.notify("Failed to load image. Please check the URL."); }); } };

//# debugId=CB846BDF2355260864756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGx1Z2luLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWwogICAgImlmIChmaWdtYS5lZGl0b3JUeXBlID09PSBcImZpZ21hXCIpIHtcbiAgZmlnbWEuc2hvd1VJKF9faHRtbF9fLCB7XG4gICAgdGhlbWVDb2xvcnM6IHRydWUsXG4gICAgd2lkdGg6IDI0NCArIDgsXG4gICAgaGVpZ2h0OiAxMTI0LFxuICAgIHRpdGxlOiBcIlZpZXdwb3J0IFNjcmVlbnNob3RcIixcbiAgfSk7XG5cbiAgZmlnbWEudWkub25tZXNzYWdlID0gKG1zZykgPT4ge1xuICAgIGlmIChtc2cudHlwZSA9PT0gXCJkYXRhLXZpZXdwb3J0XCIpIHtcbiAgICAgIGNvbnN0IE1BWF9JTUFHRV9IRUlHSFQgPSA0MDk2O1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgdXJsOiBtc2cub3B0aW9ucy51cmwsXG4gICAgICAgIHZpZXdwb3J0OiBtc2cub3B0aW9ucy52aWV3cG9ydCxcbiAgICAgICAgaW1hZ2VIZWlnaHQ6IE1BWF9JTUFHRV9IRUlHSFQsXG4gICAgICB9O1xuICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkob3B0aW9ucykpO1xuICAgICAgY29uc3QgcmVxdWVzdFVybCA9IGBodHRwOi8vbG9jYWxob3N0OjMwMDAvP29wdGlvbnM9JHtxdWVyeVN0cmluZ31gO1xuICAgICAgY29uc29sZS5sb2cocmVxdWVzdFVybCk7XG5cbiAgICAgIGZldGNoKHJlcXVlc3RVcmwpXG4gICAgICAgIC50aGVuKGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGltYWdlcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICByZXR1cm4gaW1hZ2VzO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihhc3luYyAoaW1hZ2VzKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lcyA9IFtdO1xuICAgICAgICAgICAgbGV0IHRvdGFsV2lkdGggPSAwO1xuICAgICAgICAgICAgbGV0IG1heEhlaWdodCA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgaW1hZ2VzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBuZ0ltYWdlID0gZmlnbWEuY3JlYXRlSW1hZ2UobmV3IFVpbnQ4QXJyYXkoaW1hZ2UuZGF0YSkpO1xuICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGF3YWl0IHBuZ0ltYWdlLmdldFNpemVBc3luYygpO1xuICAgICAgICAgICAgICBjb25zdCBmcmFtZSA9IGZpZ21hLmNyZWF0ZUZyYW1lKCk7XG4gICAgICAgICAgICAgIGZyYW1lLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgZnJhbWUuZmlsbHMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJJTUFHRVwiLFxuICAgICAgICAgICAgICAgICAgaW1hZ2VIYXNoOiBwbmdJbWFnZS5oYXNoLFxuICAgICAgICAgICAgICAgICAgc2NhbGVNb2RlOiBcIkZJTExcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgIGZyYW1lcy5wdXNoKGZyYW1lKTtcbiAgICAgICAgICAgICAgdG90YWxXaWR0aCArPSB3aWR0aDtcbiAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gTWF0aC5tYXgobWF4SGVpZ2h0LCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQb3NpdGlvbiBlYWNoIGZyYW1lIGNvbnNlY3V0aXZlbHlcbiAgICAgICAgICAgIGxldCB4T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZnJhbWUgb2YgZnJhbWVzKSB7XG4gICAgICAgICAgICAgIGZyYW1lLnggPSB4T2Zmc2V0O1xuICAgICAgICAgICAgICB4T2Zmc2V0ICs9IGZyYW1lLndpZHRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgZnJhbWUgdG8gY29udGFpbiBhbGwgdGhlIGluZGl2aWR1YWwgZnJhbWVzXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJGcmFtZSA9IGZpZ21hLmNyZWF0ZUZyYW1lKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9wdGlvbnMudXJsXCIsIG9wdGlvbnMudXJsKTtcbiAgICAgICAgICAgIGNvbnRhaW5lckZyYW1lLm5hbWUgPSBvcHRpb25zLnVybC5zcGxpdChcImh0dHBzOi8vXCIpWzFdO1xuICAgICAgICAgICAgY29udGFpbmVyRnJhbWUucmVzaXplKHRvdGFsV2lkdGgsIG1heEhlaWdodCk7XG4gICAgICAgICAgICBjb250YWluZXJGcmFtZS5sYXlvdXRNb2RlID0gXCJIT1JJWk9OVEFMXCI7XG4gICAgICAgICAgICBjb250YWluZXJGcmFtZS52ZXJ0aWNhbFBhZGRpbmcgPSAwO1xuICAgICAgICAgICAgY29udGFpbmVyRnJhbWUuaG9yaXpvbnRhbFBhZGRpbmcgPSAzMjtcbiAgICAgICAgICAgIGNvbnRhaW5lckZyYW1lLnByaW1hcnlBeGlzU2l6aW5nTW9kZSA9IFwiQVVUT1wiOyAvLyBBdXRvbWF0aWNhbGx5IHNpemUgYmFzZWQgb24gY2hpbGRyZW5cbiAgICAgICAgICAgIGNvbnRhaW5lckZyYW1lLmNvdW50ZXJBeGlzU2l6aW5nTW9kZSA9IFwiQVVUT1wiOyAvLyBBdXRvbWF0aWNhbGx5IHNpemUgYmFzZWQgb24gY2hpbGRyZW5cbiAgICAgICAgICAgIGNvbnRhaW5lckZyYW1lLml0ZW1TcGFjaW5nID0gODsgLy8gU3BhY2UgYmV0d2VlbiBpdGVtc1xuICAgICAgICAgICAgLy8gQWRkIGFsbCBmcmFtZXMgdG8gdGhlIGNvbnRhaW5lciBmcmFtZVxuICAgICAgICAgICAgZm9yIChjb25zdCBmcmFtZSBvZiBmcmFtZXMpIHtcbiAgICAgICAgICAgICAgY29udGFpbmVyRnJhbWUuYXBwZW5kQ2hpbGQoZnJhbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICBmaWdtYS5ub3RpZnkoXCJGYWlsZWQgdG8gbG9hZCBpbWFnZS4gUGxlYXNlIGNoZWNrIHRoZSBVUkwuXCIpO1xuICAgICAgICAgIC8vIGZpZ21hLmNsb3NlUGx1Z2luKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbiIKICBdLAogICJtYXBwaW5ncyI6ICJBQUFBLEdBQUksTUFBTSxhQUFlLFFBQ3ZCLE1BQU0sT0FBTyxTQUFVLENBQ3JCLFlBQWEsR0FDYixNQUFPLElBQ1AsT0FBUSxLQUNSLE1BQU8scUJBQ1QsQ0FBQyxFQUVELE1BQU0sR0FBRyxVQUFZLENBQUMsSUFBUSxDQUM1QixHQUFJLEVBQUksT0FBUyxnQkFBaUIsQ0FFaEMsTUFBTSxFQUFVLENBQ2QsSUFBSyxFQUFJLFFBQVEsSUFDakIsU0FBVSxFQUFJLFFBQVEsU0FDdEIsWUFKdUIsSUFLekIsRUFFTSxFQUFhLGtDQURDLG1CQUFtQixLQUFLLFVBQVUsQ0FBTyxDQUFDLElBRTlELFFBQVEsSUFBSSxDQUFVLEVBRXRCLE1BQU0sQ0FBVSxFQUNiLEtBQUssTUFBTyxJQUFhLENBRXhCLE9BRGUsTUFBTSxFQUFTLEtBQUssRUFFcEMsRUFDQSxLQUFLLE1BQU8sSUFBVyxDQUN0QixHQUFJLENBQ0YsTUFBTSxFQUFTLENBQUMsRUFDaEIsSUFBSSxFQUFhLEVBQ2IsRUFBWSxFQUVoQixRQUFXLEtBQVMsRUFBUSxDQUMxQixNQUFNLEVBQVcsTUFBTSxZQUFZLElBQUksV0FBVyxFQUFNLElBQUksQ0FBQyxHQUNyRCxRQUFPLFVBQVcsTUFBTSxFQUFTLGFBQWEsRUFDaEQsRUFBUSxNQUFNLFlBQVksRUFDaEMsRUFBTSxPQUFPLEVBQU8sQ0FBTSxFQUMxQixFQUFNLE1BQVEsQ0FDWixDQUNFLEtBQU0sUUFDTixVQUFXLEVBQVMsS0FDcEIsVUFBVyxNQUNiLENBQ0YsRUFFQSxFQUFPLEtBQUssQ0FBSyxFQUNqQixHQUFjLEVBQ2QsRUFBWSxLQUFLLElBQUksRUFBVyxDQUFNLEVBSXhDLElBQUksRUFBVSxFQUNkLFFBQVcsS0FBUyxFQUNsQixFQUFNLEVBQUksRUFDVixHQUFXLEVBQU0sTUFJbkIsTUFBTSxFQUFpQixNQUFNLFlBQVksRUFDekMsUUFBUSxJQUFJLGNBQWUsRUFBUSxHQUFHLEVBQ3RDLEVBQWUsS0FBTyxFQUFRLElBQUksTUFBTSxVQUFVLEVBQUUsR0FDcEQsRUFBZSxPQUFPLEVBQVksQ0FBUyxFQUMzQyxFQUFlLFdBQWEsYUFDNUIsRUFBZSxnQkFBa0IsRUFDakMsRUFBZSxrQkFBb0IsR0FDbkMsRUFBZSxzQkFBd0IsT0FDdkMsRUFBZSxzQkFBd0IsT0FDdkMsRUFBZSxZQUFjLEVBRTdCLFFBQVcsS0FBUyxFQUNsQixFQUFlLFlBQVksQ0FBSyxRQUUzQixFQUFQLENBQ0EsUUFBUSxJQUFJLFFBQVMsQ0FBSyxHQUU3QixFQUNBLE1BQU0sQ0FBQyxJQUFVLENBQ2hCLFFBQVEsSUFBSSxRQUFTLENBQUssRUFDMUIsTUFBTSxPQUFPLDZDQUE2QyxFQUUzRCIsCiAgImRlYnVnSWQiOiAiQ0I4NDZCREYyMzU1MjYwODY0NzU2RTIxNjQ3NTZFMjEiLAogICJuYW1lcyI6IFtdCn0=
